package io.smallrye.faulttolerance.async.compstage.circuit.breaker.halfopen;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.awaitility.Awaitility.await;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import org.eclipse.microprofile.faulttolerance.exceptions.CircuitBreakerOpenException;
import org.junit.jupiter.api.Test;

import io.smallrye.faulttolerance.core.util.party.Party;
import io.smallrye.faulttolerance.util.FaultToleranceBasicTest;

@FaultToleranceBasicTest
public class CompletionStageCircuitBreakerHalfOpenTest {
    @Test
    public void halfOpenCircuitBreakerRejectsExcessAttempts(AsyncHelloService service)
            throws ExecutionException, InterruptedException {
        // closed
        for (int i = 0; i < AsyncHelloService.ROLLING_WINDOW; i++) {
            assertThatThrownBy(() -> service.hello(true, null).toCompletableFuture().get())
                    .isExactlyInstanceOf(ExecutionException.class)
                    .hasCauseExactlyInstanceOf(IllegalArgumentException.class);
        }
        assertThat(service.getCounter()).hasValue(AsyncHelloService.ROLLING_WINDOW);

        // open
        for (int i = 0; i < 10; i++) {
            assertThatThrownBy(() -> service.hello(false, null).toCompletableFuture().get())
                    .isExactlyInstanceOf(ExecutionException.class)
                    .hasCauseExactlyInstanceOf(CircuitBreakerOpenException.class);
        }

        // await until half-open
        await().atMost(5 * AsyncHelloService.DELAY, TimeUnit.MILLISECONDS).ignoreExceptions().untilAsserted(() -> {
            assertThat(service.hello(false, null).toCompletableFuture().get()).isEqualTo("Hello, world!");
        });

        // half-open, 1st probe invocation already succeeded
        Party party = Party.create(AsyncHelloService.PROBE_ATTEMPTS - 1);
        List<CompletionStage<String>> futures = new ArrayList<>();
        for (int i = 0; i < AsyncHelloService.PROBE_ATTEMPTS - 1; i++) {
            CompletionStage<String> future = service.hello(false, party.participant());
            futures.add(future);
        }

        party.organizer().waitForAll();

        // still half-open, but all allowed probe attempts are now running
        for (int i = 0; i < 10; i++) {
            assertThatThrownBy(() -> service.hello(false, null).toCompletableFuture().get())
                    .isExactlyInstanceOf(ExecutionException.class)
                    .hasCauseExactlyInstanceOf(CircuitBreakerOpenException.class);
        }

        party.organizer().disband();

        for (CompletionStage<String> future : futures) {
            assertThat(future.toCompletableFuture().get()).isEqualTo("Hello, world!");
        }

        // closed
        assertThat(service.hello(false, null).toCompletableFuture().get()).isEqualTo("Hello, world!");

        assertThat(service.getCounter()).hasValue(AsyncHelloService.ROLLING_WINDOW + AsyncHelloService.PROBE_ATTEMPTS + 1);
    }
}
