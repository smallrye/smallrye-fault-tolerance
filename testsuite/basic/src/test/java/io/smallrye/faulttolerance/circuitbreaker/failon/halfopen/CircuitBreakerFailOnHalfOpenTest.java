package io.smallrye.faulttolerance.circuitbreaker.failon.halfopen;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.awaitility.Awaitility.await;

import java.util.concurrent.TimeUnit;

import org.eclipse.microprofile.faulttolerance.exceptions.CircuitBreakerOpenException;
import org.junit.jupiter.api.Test;

import io.smallrye.faulttolerance.util.FaultToleranceBasicTest;

@FaultToleranceBasicTest
public class CircuitBreakerFailOnHalfOpenTest {
    @Test
    public void halfOpenCircuitBreakerTreatsConfiguredExceptionsAsSuccess(HelloService service) {
        // closed
        for (int i = 0; i < HelloService.ROLLING_WINDOW; i++) {
            assertThatThrownBy(() -> service.hello(new IllegalArgumentException()))
                    .isExactlyInstanceOf(IllegalArgumentException.class);
        }
        assertThat(service.getCounter()).hasValue(HelloService.ROLLING_WINDOW);

        // open
        assertThatThrownBy(() -> service.hello(null))
                .isExactlyInstanceOf(CircuitBreakerOpenException.class);

        // await until half-open, then move to closed
        await().atMost(5 * HelloService.DELAY, TimeUnit.MILLISECONDS).untilAsserted(() -> {
            assertThatThrownBy(() -> service.hello(new IllegalStateException()))
                    .isExactlyInstanceOf(IllegalStateException.class);
        });

        // closed
        for (int i = 1; i <= 10; i++) {
            assertThatThrownBy(() -> service.hello(new IllegalStateException()))
                    .isExactlyInstanceOf(IllegalStateException.class);
        }
        assertThat(service.getCounter()).hasValue(HelloService.ROLLING_WINDOW + 11);
    }
}
